<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>BeeSci</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2022-07-15T10:30:48-07:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Joshua Haug</name>
   <email>josh.haug55@gmail.com</email>
 </author>

 
 <entry>
   <title>Hive Monitor v4: Custom PCB</title>
   <link href="http://localhost:4000/hardware-v4.html"/>
   <updated>2021-04-21T00:00:00-07:00</updated>
   <id>http://localhost:4000/hardware-v4</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
üêù  This is the fourth iteration of my beehive monitoring prototype.
&lt;/div&gt;

&lt;p&gt;I‚Äôve learned from my previous prototypes (&lt;a href=&quot;hardware.html&quot;&gt;v1&lt;/a&gt;, &lt;a href=&quot;hardware-v2.html&quot;&gt;v2&lt;/a&gt;, &lt;a href=&quot;hardware-v3.html&quot;&gt;v3&lt;/a&gt;) that the ideal system for monitoring hive conditions would be small and battery operated so that it can be placed inside the hive. My &lt;a href=&quot;hardware-v3.html&quot;&gt;third prototype&lt;/a&gt; was the smallest yet, but required cutting away a secion of the bee‚Äôs functional honeycomb. Moreover, I had to make them by hand, which doesn‚Äôt scale very well. So for this version, I‚Äôm going to try and make a printed circuit board with the same functionality.&lt;/p&gt;

&lt;h4 id=&quot;Ô∏è-electronics&quot;&gt;‚ö°Ô∏è Electronics&lt;/h4&gt;

&lt;p&gt;The basic requirements for this thing are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;An ESP32, which already has WiFi and Bluetooth built in&lt;/li&gt;
  &lt;li&gt;a microphone&lt;/li&gt;
  &lt;li&gt;a temperature and humidity sensor&lt;/li&gt;
  &lt;li&gt;a method of storing large amounts of data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Based on my previous prototype, I drew up a circuit that seemed like it would work. Then I paid a guy on Fiverr to draw up a PCB to implement that schematic, then had them fabricated somewhere in China. Here‚Äôs what the PCB looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/v4-pcb-2.jpg&quot; alt=&quot;The PCB&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, there‚Äôs a microphone, a temp/humidity sensor, and a micro-sd card slot. Initially, I was going to include a micro USB connector, but that would‚Äôve complicated the circuit, and added cost. So instead I decided to use pogo pins on a 3d-printed jig to program the boards.&lt;/p&gt;

&lt;h4 id=&quot;-enclosure&quot;&gt;üì¶ Enclosure&lt;/h4&gt;

&lt;p&gt;My previous design required that the honeycomb be cut away, but this one is thin enough that the PCB and battery can be slipped between the frames of the beehive. 
I modeled the enclosure in Fusion 360, then 3d printed it in yellow PLA.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/v4-enclosure-1.jpg&quot; alt=&quot;The enclosure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/v4-enclosure-2.jpg&quot; alt=&quot;The enclosure in the hive&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;firmware&quot;&gt;Firmware&lt;/h4&gt;

&lt;p&gt;If you‚Äôre not interested in software, feel free to skip this section. 
My prime objective with this version was to reduce power consumption.  I ended up spending a lot of time on this, primarily because the ESP32 is a power-hungry monster. Don‚Äôt get me wrong, it‚Äôs amazingly powerful and dirt cheap, but it‚Äôs not well suited for low power battery-operated IoT devices.&lt;/p&gt;

&lt;p&gt;Some of the tricks I used to reduce power consumption:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Using the deep sleep functionality of the ESP32, and using a hardware interrupt timer&lt;/li&gt;
  &lt;li&gt;Re-compiling the bootloader to prevent checksumming the program memory on every wake&lt;/li&gt;
  &lt;li&gt;Not syncing with WiFi on every wake&lt;/li&gt;
  &lt;li&gt;Not writing to the SD card on every wake. Writing to disk is super slow, and there‚Äôs a lot of overhead to mount the disk. I‚Äôm saving the sensor readings to RTC memory, and pooling disk writes.&lt;/li&gt;
  &lt;li&gt;Reducing the size of the audio buffer. This means the sound recording takes up less time (and makes the computation faster). The tradeoff is that you are effectively losing resolution in the output frequency domain (the frequency bin size is higher) but there‚Äôs a happy medium.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After all those optimizations, I was able to get the average wake time to under 200mS, which for this hardware is pretty good! Here‚Äôs the current on my oscilloscope.
&lt;img src=&quot;../assets/v4-power.jpg&quot; alt=&quot;Power consumption after optimizations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on some experimentation and calculations, a 1000mAh battery would power this thing for 1.5 years!&lt;/p&gt;

&lt;h3 id=&quot;data-analysis&quot;&gt;Data Analysis&lt;/h3&gt;

&lt;p&gt;I‚Äôm still collecting data from these sensors, so I think I‚Äôll save the data analysis for another time. Stay tuned!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Hive Monitor v3: Inside the Hive</title>
   <link href="http://localhost:4000/hardware-v3.html"/>
   <updated>2021-04-21T00:00:00-07:00</updated>
   <id>http://localhost:4000/hardware-v3</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
üêù  This is the third iteration of my beehive monitoring prototype.
&lt;/div&gt;

&lt;p&gt;I‚Äôve learned from my previous prototypes (&lt;a href=&quot;hardware.html&quot;&gt;v1&lt;/a&gt;, &lt;a href=&quot;hardware-v2.html&quot;&gt;v2&lt;/a&gt;) that hive temperature readings are most informative when they come directly from the brood chamber of the hive. So I made another one that can be placed &lt;strong&gt;inside&lt;/strong&gt; the hive.&lt;/p&gt;

&lt;h4 id=&quot;Ô∏è-electronics&quot;&gt;‚ö°Ô∏è Electronics&lt;/h4&gt;

&lt;p&gt;I‚Äôm using an ESP32, which is a super inexpensive SoC with all sorts of great features. I soldered it to a protoboard and hooked up an analog microphone and temperature sensor.&lt;/p&gt;

&lt;p&gt;The ESP32 is equipped with Wi-Fi and Bluetooth, so in theory I can just aggregate sensor readings in memory and send them off to a server. But I‚Äôd like to write the sensor readings to some kind of non-volatile memory for safekeeping. So I soldered on a MicroSD card adapter. Shield your eyes, this thing is kind of an abomination.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/v3-frontandback.jpg&quot; alt=&quot;The front of the prototype&quot; /&gt;
&lt;em&gt;The front and back of the prototype circuit.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The ESP32 is a Sparkfun ESP32 Thing, which has a low-dropout voltage regulator on board. This means I can power it with a LiPo battery.&lt;/p&gt;

&lt;h4 id=&quot;-enclosure&quot;&gt;üì¶ Enclosure&lt;/h4&gt;

&lt;p&gt;To prevent the bees from going nuts and tearing up the circuit, I modeled a little enclosure in Fusion 360. It‚Äôs just a 3D-printed box that zip-ties to the frame. Because of the thickness of the circuit board, part of the frame had to be cut away. Not ideal, but we‚Äôll address that later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/v3-enclosure.JPG&quot; alt=&quot;The enclosure&quot; /&gt;
&lt;em&gt;The enclosure, in place on the frame.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;firmware&quot;&gt;Firmware&lt;/h4&gt;

&lt;p&gt;The firmware for this prototype is nearly the same as the firmware for &lt;a href=&quot;hardware-v2.html&quot;&gt;version 2&lt;/a&gt;, so I won‚Äôt really bore you with it. Basically a C++ program that orchestrates all the sensor readings and syncs. I will say that debugging the firmware was kind of a pain. You don‚Äôt realize how many bugs your code has until it‚Äôs literally surrounded by thousands of stinging insects.&lt;/p&gt;

&lt;p&gt;An interesting technical challenge with this version was audio processing. With my &lt;a href=&quot;hardware.html&quot;&gt;very first prototype&lt;/a&gt;, I was recording lossless, hour-long WAV files. But with embedded hardware, there are power and memory limitations that necessitate a different approach. The ESP32 has 4 MB of memory ‚Äì that‚Äôs a lot for an embedded device, but literally &lt;em&gt;three orders of magnitude less&lt;/em&gt; than the Raspberry Pi I used in V1.&lt;/p&gt;

&lt;p&gt;For this one, I decided to record and average really short audio samples that could fit in memory, and process them on board the ESP32 with an FFT. (An FFT, and more generally a Fourier transform, is a method of converting signals into their component frequencies. For example, if you use an FFT on a choir singing a chord, you‚Äôll be able to tell the pitches the individual members were singing.) The resulting frequency information could then be saved onto the SD card and sent over Wi-Fi to my server.&lt;/p&gt;

&lt;h3 id=&quot;data-analysis&quot;&gt;Data Analysis&lt;/h3&gt;

&lt;p&gt;With this prototype I wanted to dive deep into processing audio signals from within the hive. So, I installed this monitor in a hive without a queen, and then installed a queen a couple days later. Here are the FFT results from the day the queen was installed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/v3-fft-queen.jpg&quot; alt=&quot;Queen Inserted&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that an FFT was taken every 10 minutes, but they have been averaged together into 5-hour segments to make the chart easier to read. Looking at this graph, you can see that installing a queen in the hive causes a massive change in the the sound the hive makes. The sound gets louder and increases in pitch. A more complete way of viewing this is with a spectrogram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/v3-spectrogram_alpha.jpg&quot; alt=&quot;Queen Inserted&quot; /&gt;
&lt;em&gt;In a spectrogram, each column is the FFT of an individual audio sample, and the intensity of frequency bins are encoded as color instead of height. You can clearly see that there was a huge change in the signal at 6PM.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;There appears to be some interesting correlation between the sound of the bees and their health. I‚Äôm going to reserach this a bit more, and try to collect some better data to verify this correlation.&lt;/p&gt;

&lt;p&gt;After assembling a few of these, I got very tired, so I spent the time designing a custom PCB. The details can be found on the page about the &lt;a href=&quot;hardware-v4.html&quot;&gt;fourth prototype&lt;/a&gt;. Go take a look!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Hive Monitor v2: Adding a Scale</title>
   <link href="http://localhost:4000/hardware-v2.html"/>
   <updated>2021-02-07T00:00:00-08:00</updated>
   <id>http://localhost:4000/hardware-v2</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
üêù  This is the second iteration of my beehive monitoring prototype.
&lt;/div&gt;

&lt;p&gt;I‚Äôve learned from my previous prototype that hive temperature readings taken right underneath the lid are not nearly as informative as they might seem. So maybe instead of the device living inside the hive lid, I should be taking readings near the bottom of the hive. And as long as I‚Äôm gonna be messing with the underside of the hive, I‚Äôd like to start taking some weight measurements. Weight increase can be good indicator of hive growth, as it means the bees are bringing in nectar and pollen.&lt;/p&gt;

&lt;p&gt;If this thing is going to run off of a battery, I‚Äôll have to use something much lower-power than a Raspberry Pi. I‚Äôm using an ESP32, which is a super inexpensive SoC with all sorts of great features. I hooked it up to an analog microphone, 2 temperature sensors, a load cell amplifier, and a micro sd card adapter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/v2-internals.jpg&quot; alt=&quot;The front of the prototype&quot; /&gt;
&lt;em&gt;The inside of the device.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The whole thing is hooked up with DuPont wires. It‚Äôs not very nice to look at, but it does work.&lt;/p&gt;

&lt;h3 id=&quot;enclosure&quot;&gt;Enclosure&lt;/h3&gt;

&lt;p&gt;The enclosure was really a way for me to explore some of Fusion 360‚Äôs cooler features. It‚Äôs made of four parts: a 3D-printed hexagonal box, a threaded pipe with an integrated screen that attaches to the bottom of the hive, a lid for the box, and a nut to hold the pipe in place.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/v2-standalone-2.jpg&quot; alt=&quot;Standalone&quot; /&gt;
&lt;em&gt;The device with the scale.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;firmware&quot;&gt;Firmware&lt;/h3&gt;

&lt;p&gt;The hardware is only half the battle ‚Äì the next step is writing firmware. I slapped together a little program for the ESP32 that would wake up, take sensor readings, sync with a server, and then go back to sleep.&lt;/p&gt;

&lt;p&gt;Looking at the preliminary data, I quickly realized this version was not going to work. The bees just don‚Äôt thermoregulate the bottom of the hive. They are more interested in ensuring the brood chamber is thermoregulated. This meant that the form factor I had in mind was not going to work. So I decided to disassemble to prototype, lose the scale, and try putting the temperature sensor inside the hive. This ended up becoming my &lt;a href=&quot;hardware-v3.html&quot;&gt;third prototype&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hive Monitor v1: A Pi on the Roof</title>
   <link href="http://localhost:4000/hardware.html"/>
   <updated>2020-07-14T00:00:00-07:00</updated>
   <id>http://localhost:4000/hardware</id>
   <content type="html">&lt;p&gt;Here‚Äôs a prototype I‚Äôm working on for monitoring a hive‚Äôs temperature and audio.  The brains of the operation is a Raspberry Pi 4 running Raspbian.  Here‚Äôs what it looks like on the inside:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/setup.jpg&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;temperature-data-collection&quot;&gt;Temperature Data Collection&lt;/h3&gt;

&lt;p&gt;I‚Äôm measuring hive temperature with two sensors:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;k-type thermocouple and amplifier (MAX6675) for internal temperature&lt;/li&gt;
  &lt;li&gt;infrared thermopile (TMP006) for ambient temperature&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideally I‚Äôd use just thermocouples, but these are the only sensors I have on hand. I have some of the data I collected from this setup at the end of this article.&lt;/p&gt;

&lt;p&gt;I‚Äôm using a &lt;a href=&quot;https://github.com/tdack/MAX6675&quot;&gt;python library&lt;/a&gt; to read the temperature every ten seconds.  The logging scheme is decidedly un-fancy ‚Äì I‚Äôm just appending a text file with timestamped readings.  Here‚Äôs the basic idea:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;temp.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensor1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readTempC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensor2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readDieTempC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sensor2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readObjTempC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;An error occured&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Initially, I wrote the script with the &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; statement outside the loop, like so‚Ä¶&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;temp.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'something'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;‚Ä¶ to save on the cost of reopening the file for each iteration of the loop. But this code doesn‚Äôt update the file after every call to &lt;code class=&quot;highlighter-rouge&quot;&gt;f.write('...')&lt;/code&gt; , thanks to the magic of unnecessary file buffering.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/file-buffering.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This can be fixed by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;f.flush()&lt;/code&gt; after every &lt;code class=&quot;highlighter-rouge&quot;&gt;f.write()&lt;/code&gt;, or specifying a buffer length of 0: &lt;code class=&quot;highlighter-rouge&quot;&gt;open('temp.txt', 'a', 0)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;audio-data-collection&quot;&gt;Audio Data Collection&lt;/h2&gt;

&lt;p&gt;Audio is coming from an old Guitar Hero USB mic I cannibalized.   On the Pi, I‚Äôm using  &lt;a href=&quot;http://manpages.org/arecord&quot;&gt;arecord&lt;/a&gt; in a bash script more or less like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;    
    arecord &lt;span class=&quot;nt&quot;&gt;--device&lt;/span&gt; sysdefault:CARD&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt; S16_LE &lt;span class=&quot;nt&quot;&gt;--rate&lt;/span&gt; 11025 &lt;span class=&quot;nt&quot;&gt;--channels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nt&quot;&gt;--duration&lt;/span&gt; 3600 out.wav &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is just recording an hour (3600 seconds) of mono (1 channel) sound (16 bit samples, little endian) at 11025 samples per second.&lt;/p&gt;

&lt;p&gt;Why am I recording at 11025 Hz instead of the standard 44.1kHz? Some papers&lt;sup id=&quot;fnref:fn-acoustics&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:fn-acoustics&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;fnref:fn-vibratory&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:fn-vibratory&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; indicate that bee communication sounds are composed of a low fundamental frequency between 300 and 600Hz and the corresponding harmonics. Therefore, the Nyquist sampling rate is 1200 Hz, but that makes for some gnarly audio.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/acoustic-signature.jpg&quot; alt=&quot;  &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Besides, the standard 44.1kHz stereo signal is ~10MB per minute. The mono 11kHz signal is ~1.25 MB per minute, which is a tolerable 1.8GB per day. For data safety and ease of processing, I‚Äôm recording the audio data as 1-hour wav files.&lt;/p&gt;

&lt;h2 id=&quot;networking&quot;&gt;Networking&lt;/h2&gt;

&lt;p&gt;The Pi is connected via WLAN to an old AirPort Extreme. From the house, I can connect to the network and &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into the Pi to download the data, modify scripts, etc. Here‚Äôs a technical schematic showing this network configuration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/networking.png&quot; alt=&quot;  &quot; /&gt;&lt;/p&gt;

&lt;p&gt;To keep data collection running after I close the session, I‚Äôm running &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt; and detaching. There are other ways to do this, like &lt;code class=&quot;highlighter-rouge&quot;&gt;nohup&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;screen&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;disown&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bg&lt;/code&gt;, etc., but &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt; is part of my regular workflow.&lt;/p&gt;

&lt;p&gt;From my laptop, I can run a small script to switch networks and download the data every so often:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Connecting to beenet...&quot;&lt;/span&gt;
networksetup &lt;span class=&quot;nt&quot;&gt;-setairportnetwork&lt;/span&gt; en0 beenet password
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Downloading data...&quot;&lt;/span&gt;
scp pi@raspberrypi.local:~/bees/temp.txt &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Connecting to home network...&quot;&lt;/span&gt;
networksetup &lt;span class=&quot;nt&quot;&gt;-setairportnetwork&lt;/span&gt; en0 homenet password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This data collection scheme is fine for prototyping, but would be very inconvenient for live metrics.&lt;/p&gt;

&lt;h3 id=&quot;housing&quot;&gt;Housing&lt;/h3&gt;

&lt;p&gt;These sensors are arranged in a crappy box made from literal garbage ‚Äì plywood and pallet wood I found in a dumpster.  Here‚Äôs  what it looks like all assembled:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/hive-with-sensors.jpg&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;data&quot;&gt;Data&lt;/h3&gt;

&lt;p&gt;Here is what the initial data looks like from this setup:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/temp.jpg&quot; alt=&quot;  &quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the TMP006 produces two readings: object temperature (the reading from the surface the thermopile is pointed at) and die temperature (the temperature from the die itself).   For more info see the TMP006 &lt;a href=&quot;https://cdn.sparkfun.com/datasheets/Sensors/Temp/sbou107.pdf&quot;&gt;user guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The large spike on 4/24 was due to the hive being in direct sunlight.  The night of the 24th, we placed shade covers over the hives to prevent them from overheating.   This clearly made a difference.&lt;/p&gt;

&lt;h3 id=&quot;why-do-bees-thermoregulate&quot;&gt;Why do bees thermoregulate?&lt;/h3&gt;

&lt;p&gt;Bees work hard to keep the temperature of the hive &lt;em&gt;just&lt;/em&gt; right.  But why?  The later-stage young, called pupae, are like little Goldilocks ‚Äì they need to be kept between 33 and 36¬∫C (91.4 - 96.8¬∫F) to prevent physical and behavioral defects. Pupae develop in sealed-off cells of the honeycomb, called ‚Äúcapped brood cells.‚Äù  Here‚Äôs a picture I took of some capped brood cells:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/capped-brood.jpg&quot; alt=&quot; Capped Brood&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If these cells get too hot, workers use evaporative cooling ‚Äì they splash the cells with water and fan them with their wings.  If the cells get too cold, workers will vibrate their flight muscles to produce heat.  Here is what the heating process looks like under a thermal camera.&lt;sup id=&quot;fnref:fn-thermo&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:fn-thermo&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/heater-bees.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;div class=&quot;message&quot;&gt;
&lt;b&gt;TL;DR&lt;/b&gt; Need better ambient temperature sensor, a thermocouple would be best. Need better attic with more insulation. And the sample rate is far too high!   
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Using IR sensor for ambient temperature is bad&lt;/strong&gt; ‚Äì My hope was that the attic measurements could be used as a baseline for comparison with the inside of the hive (i.e. it would provide the ambient temperature inside a wooden box, thus accounting for any insulation that the hive boxes provide). In theory, then, the difference between the attic temperature and the hive temperature would be due entirely to bee activity. But this is not necessarily the case, due to:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;differences in sensor properties (e.g. rate of heat absorption of the IR die vs the thermocouple)  ‚Üí can be fixed by using a thermocouple&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;differences in construction between the hive boxes (solid wood, painted white) and the attic (plywood top and bottom, solid wood sides, unpainted) ‚Üí can be re-made&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;interactions between the attic and the hive boxes (e.g. attic absorbes most of the sunlight at noon, and heat transfer between the hive boxes and the attic) ‚Üí not yet sure how this can be addressed&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;My sampling rate is too high&lt;/strong&gt; ‚Äì A reading every ten seconds is excessive. It‚Äôs clear that interesting events happen over the course of minute, not seconds. The BUR dataset resolution of one hour might be a little coarse, but I feel comfortable sampling every 5 minutes (30 times fewer datapoints than the current setup).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fn-acoustics&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Qandour, Amro &amp;amp; Ahmad, Iftekhar &amp;amp; Habibi, Daryoush &amp;amp; Leppard, Mark. Remote Beehive Monitoring using Acoustic Signals. Acoustics Australia / Australian Acoustical Society. 42. 204-209. 2014.¬†&lt;a href=&quot;#fnref:fn-acoustics&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn-vibratory&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;M. Hrncir, F. G. Barth, and J. Tautz, ‚Äú32 vibratory and airborne-sound signals in bee communication (hymenoptera),‚Äù Insect Sounds and Communication: Physiology, Behaviour, Ecology, and Evolution, p. 421, 2005.¬†&lt;a href=&quot;#fnref:fn-vibratory&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn-thermo&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Stabentheiner A, Kovac H, Brodschneider R. Honeybee colony thermoregulation‚Äìregulatory mechanisms and contribution of individuals in dependence on age, location and thermal stress. &lt;em&gt;PLoS One&lt;/em&gt;. 2010;5(1):e8967. Published 2010 Jan 29. &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2813292/&quot;&gt;pdf&lt;/a&gt;¬†&lt;a href=&quot;#fnref:fn-thermo&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Big Handle</title>
   <link href="http://localhost:4000/big-handle.html"/>
   <updated>2020-07-06T00:00:00-07:00</updated>
   <id>http://localhost:4000/big-handle</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>Improving the Prototype's Temperature Sensor</title>
   <link href="http://localhost:4000/hardware-v1.5.html"/>
   <updated>2020-07-05T00:00:00-07:00</updated>
   <id>http://localhost:4000/hardware-v1.5</id>
   <content type="html">&lt;p&gt;In my &lt;a href=&quot;hardware.html&quot;&gt;previous prototype&lt;/a&gt;, I used a thermocouple to measure the hive temp and an IR thermopile to measure the ambient temp. which was an apples-to-oranges comparison. With identical thermometers I‚Äôll get a better sense of the actual tempertaures inside and outside the hive.&lt;/p&gt;

&lt;p&gt;Well, I just got some K-type thermocouples and MAX6675 breakout boards in the mail. It‚Äôs like Christmas in July!&lt;/p&gt;

&lt;p&gt;Here‚Äôs a wiring diagram showing how the new MAX6675 breakouts are connected to the Raspberry Pi:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/3tc-wiring.png&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that I‚Äôm sharing the power (&lt;code class=&quot;highlighter-rouge&quot;&gt;VCC&lt;/code&gt;), ground (&lt;code class=&quot;highlighter-rouge&quot;&gt;GND&lt;/code&gt;), serial clock input (&lt;code class=&quot;highlighter-rouge&quot;&gt;SCK&lt;/code&gt;) and serial data output (&lt;code class=&quot;highlighter-rouge&quot;&gt;SO&lt;/code&gt;) lines across the three boards.  Each board has only one unique wire, going to the chip select (&lt;code class=&quot;highlighter-rouge&quot;&gt;CS&lt;/code&gt;) pin.  This pin is active low according to the &lt;a href=&quot;https://datasheets.maximintegrated.com/en/ds/MAX6675.pdf&quot;&gt;datasheet&lt;/a&gt;, so you need to set each board‚Äôs GPIO pin to 0 (and the others to 1) before reading it.&lt;/p&gt;

&lt;p&gt;Each MAX6675 chip has a max current draw of 1.5mA, so we‚Äôre well within the Pi‚Äôs pin limit of 16mA.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Counting Bee Movements Using a CNN</title>
   <link href="http://localhost:4000/counting-bees-using-a-cnn.html"/>
   <updated>2020-05-14T14:46:20-07:00</updated>
   <id>http://localhost:4000/counting-bees-using-a-cnn</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
Counting the number of &lt;b&gt;foragers&lt;/b&gt; (bees that collect pollen, nectar, and water) is an important measure of hive health. What if we could use a &lt;b&gt;convolutional neural network&lt;/b&gt; to count bees at the entrance of the hive?
&lt;/div&gt;

&lt;p&gt;Luckily, we can stand on the shoulders of giants. In &lt;a href=&quot;https://www.mdpi.com/2076-3417/9/18/3743&quot;&gt;this great paper&lt;/a&gt; by Vladimir Kulyukin and Sarbajit Mukherjee, the authors trained a CNN classifier for this very purpose.  &lt;strong&gt;And they released their labeled data!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look at some of that sweet, sweet data (from dataset BEE1, 32x32 images):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/classes.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ‚Äúno bee‚Äù class seems to have a red bias, but we‚Äôll address that later.&lt;/p&gt;

&lt;p&gt;Here‚Äôs the architecture that they say worked best for a 32x32 input image:
&lt;img src=&quot;assets/cnn-1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With that image, I was able to implement the network in a few minutes using Keras:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conv2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxPooling2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BatchNormalization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conv2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxPooling2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BatchNormalization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conv2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxPooling2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sigmoid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here‚Äôs what the accuracy looks like during training:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/training.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;applying-it-to-our-data&quot;&gt;Applying It To Our Data&lt;/h3&gt;

&lt;p&gt;Note that this is an image &lt;strong&gt;classifier&lt;/strong&gt;, not a detector.  To apply this classifier to video, the authors used a scheme like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;apply some background subtraction/motion detection algorithm like &lt;a href=&quot;http://www.ee.surrey.ac.uk/CVSSP/Publications/papers/KaewTraKulPong-AVBS01.pdf&quot;&gt;MOG&lt;/a&gt;, &lt;a href=&quot;https://ieeexplore.ieee.org/document/1333992&quot;&gt;MOG2&lt;/a&gt;, or &lt;a href=&quot;https://goldberg.berkeley.edu/pubs/acc-2012-visual-tracking-final.pdf&quot;&gt;GMG&lt;/a&gt; to determine regions of interest, then&lt;/li&gt;
  &lt;li&gt;generate some 32x32 image tile containing the region of interest, then&lt;/li&gt;
  &lt;li&gt;run the CNN on the tile to determine whether the motion was ‚Äúbee related‚Äù or not&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In other words, &lt;strong&gt;rather than counting the number of bees, they are counting the number of movements that are bee-related&lt;/strong&gt;.  This is a useful metric to determine &lt;em&gt;relative&lt;/em&gt; changes in foraging behavior.  That said, a bee detection or pose estimation NN may provide even more insight.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Quick and Dirty Way to Count Bees</title>
   <link href="http://localhost:4000/quick-video-analysis.html"/>
   <updated>2020-05-01T00:00:00-07:00</updated>
   <id>http://localhost:4000/quick-video-analysis</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
Today we'll explore some basic image processing techniques to count bees. These require &lt;b&gt;no labeled training data&lt;/b&gt;, so we'll try them first before moving on to fancier techniques.
&lt;/div&gt;

&lt;p&gt;Generally speaking, the number of bees at the entrance of the hive is a good indicator of the health of the hive. This means that the bees are collecting food (nectar and pollen). So let‚Äôs try to count some bees with as little effort as possible!&lt;/p&gt;

&lt;p&gt;Say I have a video of the entrance of a beehive, like this:
&lt;img src=&quot;assets/phone-basic.mp4&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;p&gt;If I wanted to count the number of bees in each frame, I &lt;em&gt;could&lt;/em&gt; set up and train an object detection CNN.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But here‚Äôs a lazy way to do it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, collapse the color data and apply a Gaussian blur to each frame, like so:
&lt;img src=&quot;assets/phone-blur.mp4&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then apply pixel thresholding to get the dark spots, like so:
&lt;img src=&quot;assets/phone-darkspots.mp4&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;p&gt;To interpret the list of points as separate objects, we can use a clustering algorithm.  Here‚Äôs an example using &lt;a href=&quot;https://en.wikipedia.org/wiki/Hierarchical_clustering&quot;&gt;hierarchical clustering&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/phone-clusters.mp4&quot; alt=&quot;  &quot; /&gt;&lt;/p&gt;

&lt;p&gt;It &lt;strong&gt;kind of&lt;/strong&gt; works!  From here we can just count the clusters to get an approximation of the number of bees in frame.&lt;/p&gt;

&lt;p&gt;Some clear problems though:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I had to determine a few values experimentally, like intensity threshold and clustering distance threshold&lt;/li&gt;
  &lt;li&gt;This only works because the bees‚Äô heads and thoraxes are the darkest things in frame. Any dark black objects on the ground would also be counted as bees.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This technique is fast but not reliably accurate.  But the small amount of computation required makes it suitable for a low-power application.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How To Make This Website</title>
   <link href="http://localhost:4000/about-this-site.html"/>
   <updated>2016-10-04T01:02:23-07:00</updated>
   <id>http://localhost:4000/about-this-site</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
How I made this website.  Guaranteed to be boring for non-developers.
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;How did you make it?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I modeled my effort on &lt;a href=&quot;http://joshualande.com/jekyll-github-pages-poole&quot;&gt;this one&lt;/a&gt;. In short, it uses &lt;a href=&quot;https://github.com/poole/poole&quot;&gt;Poole&lt;/a&gt;, which is a theme for &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;.  I write the posts in markdown and Jekyll converts the files to HTML.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;How did you get math to render on your site?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The math on this site is rendered using &lt;a href=&quot;https://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt;.  To get this working, I navigated to Jekyll‚Äôs &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts/default.html&lt;/code&gt; and included this snippet:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now I can use the LaTeX math format in my blog posts and it comes out as a beautiful equation.  For example, the equation for the aerodynamic diameter of an aerosol particle&lt;sup id=&quot;fnref:fn-aerodyn&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:fn-aerodyn&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; is represented as &lt;code class=&quot;highlighter-rouge&quot;&gt;$${a} = d_{e}\left(\frac{\rho_{p}}{\rho_{0}\chi}\right)^{\frac{1}{2}}$$&lt;/code&gt; in my code, but produces‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;

\[{a} = d_{e}\left(\frac{\rho_{p}}{\rho_{0}\chi}\right)^{\frac{1}{2}}\]

&lt;p&gt;&lt;strong&gt;Why do your code blocks look so nice?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The built-in support for code blocks produced ugly horizontal scroll bars.  To add functionality for code wrapping, I went to &lt;code class=&quot;highlighter-rouge&quot;&gt;_sass/_code.scss&lt;/code&gt;, found the block that started with &lt;code class=&quot;highlighter-rouge&quot;&gt;pre {&lt;/code&gt; and added in &lt;code class=&quot;highlighter-rouge&quot;&gt;white-space: pre-wrap;&lt;/code&gt;, which did the trick.  If you‚Äôre on mobile, however, the code blocks are gonna look ugly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;How are you hosting it?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This website is &lt;a href=&quot;https://github.com/joshhaug/joshhaug.github.io&quot;&gt;hosted on github pages&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fn-aerodyn&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;In case you‚Äôre interested, the particle is assumed to have a density p‚ÇÄ = 1000 kg/m¬≥.  I‚Äôm still trying out using footnotes in markdown, so that‚Äôs what I‚Äôm doing here.¬†&lt;a href=&quot;#fnref:fn-aerodyn&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 

</feed>
